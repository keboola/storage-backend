on:
  workflow_call:
    inputs:
      hasCodeChanged:
        required: true
        type: boolean
      isTag:
        required: true
        type: boolean
      isRequiredRepoChanged:
        required: true
        type: boolean
    secrets:
      SNOWFLAKE_PASSWORD:
        required: true
      SYNAPSE_PWD:
        required: true
      SYNAPSE_PRINCIPAL_PASSWORD:
        required: true
      TERADATA_PASSWORD:
        required: true
env:
  TEST_PREFIX: gh_
  AWS_CREDENTIALS_REGION: us-east-1
  AWS_CREDENTIALS_ROLE_TO_ASSUME: arn:aws:iam::149899208592:role/ci-storage-backend-BaseStorageBackendRole-5WXOY9DYENCT
  # Snowflake
  SNOWFLAKE_HOST: keboolaconnectiondev.us-east-1.snowflakecomputing.com
  SNOWFLAKE_PORT: 443
  SNOWFLAKE_USER: KEBOOLA_CI_TABLE_UTILS
  SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
  SNOWFLAKE_DATABASE: KEBOOLA_CI_TABLE_UTILS
  SNOWFLAKE_WAREHOUSE: DEV
  # Synapse
  SYNAPSE_UID: ci
  SYNAPSE_PWD: ${{ secrets.SYNAPSE_PWD }}
  SYNAPSE_DATABASE: ci-github-actions
  SYNAPSE_SERVER: ci-github-actions.database.windows.net
  SYNAPSE_PRINCIPAL: 9a024e58-4bc6-403a-b6a0-78b1ffdaefd6
  SYNAPSE_PRINCIPAL_PASSWORD: ${{ secrets.SYNAPSE_PRINCIPAL_PASSWORD }}
  SYNAPSE_PRINCIPAL_TENANT: 9b85ee6f-4fb0-4a46-8cb7-4dcc6b262a89
  SYNAPSE_RESOURCE_GROUP: ci-php-table-backend-utils
  SYNAPSE_SQL_SERVER_NAME: ci-github-actions
  SYNAPSE_DW_SERVER_NAME: ci-github-actions
  # Teradata
  TERADATA_HOST: 20.105.40.100
  TERADATA_USERNAME: dbc
  TERADATA_PASSWORD: ${{ secrets.TERADATA_PASSWORD }}
  TERADATA_PORT: 1025
  TERADATA_DATABASE: ci_table_utils
  # Exasol
  EXASOL_HOST: exasol:8563
  EXASOL_USERNAME: sys
  EXASOL_PASSWORD: exasol

jobs:
  build_image_php74_table_backend_utils:
    if: ${{ inputs.hasCodeChanged || inputs.isTag || inputs.isRequiredRepoChanged }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_CREDENTIALS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_CREDENTIALS_REGION }}
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ci-monorepo
          path: /tmp
      - name: Load Base monorepo Docker image
        run: |
          docker load --input /tmp/ci-monorepo.tar
      - name: Monorepo Localize Composer Paths
        run: |
          docker-compose run ci-monorepo composer install
          docker-compose run ci-monorepo vendor/bin/monorepo-builder localize-composer-paths packages/php-table-backend-utils/composer.json --ansi

      - name: Build docker image
        run: |
          docker-compose build ci-php-table-backend-utils74
      - name: Check
        run: |
          docker-compose run ci-php-table-backend-utils74 composer check
  build_image_php_table_backend_utils:
    if: ${{ inputs.hasCodeChanged || inputs.isTag || inputs.isRequiredRepoChanged }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      -
        name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_CREDENTIALS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_CREDENTIALS_REGION }}
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ci-monorepo
          path: /tmp
      - name: Load Base monorepo Docker image
        run: |
          docker load --input /tmp/ci-monorepo.tar
      -
        name: Monorepo Localize Composer Paths
        run: |
          docker-compose run ci-monorepo composer install
          docker-compose run ci-monorepo vendor/bin/monorepo-builder localize-composer-paths packages/php-table-backend-utils/composer.json --ansi
      -
        name: Check
        env:
          DOCKER_BUILDKIT: 1
        run: |
          docker-compose build ci-php-table-backend-utils
          docker-compose run ci-php-table-backend-utils composer check
          docker commit $(docker ps -alq) ci-php-table-backend-utils:latest
          docker save -o /tmp/ci-php-table-backend-utils.tar ci-php-table-backend-utils:latest
      -
        name: Upload docker image
        uses: actions/upload-artifact@v3
        with:
          name: ci-php-table-backend-utils
          path: /tmp/ci-php-table-backend-utils.tar

  build_php_table_backend_utils:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: build_image_php_table_backend_utils
    concurrency: ${{ matrix.suite }}
    strategy:
      fail-fast: false
      matrix:
        suite: [ exasol, snowflake, synapse, teradata ]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_CREDENTIALS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_CREDENTIALS_REGION }}
      -
        name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ci-php-table-backend-utils
          path: /tmp
      -
        name: Load Docker image
        run: |
          docker load --input /tmp/ci-php-table-backend-utils.tar
      #
      # Before tests, start services
      -
        name: Synapse start
        if: ${{ matrix.suite == 'synapse' }}
        run: |
          bash ./ci/synapse.sh -r
          bash ./ci/synapse.sh -w
      -
        name: Exasol start
        if: ${{ matrix.suite == 'exasol' }}
        run: |
          docker-compose up -d exasol
          sleep 60
      #
      # TESTS
      #
      -
        name: Tests ${{ matrix.suite }}
        env:
          SUITE: ${{ matrix.suite }}
          DOCKER_BUILDKIT: 1
        run: |
          docker-compose run ci-php-table-backend-utils composer tests-${{ matrix.suite }}
      #
      # After tests, stop services
      -
        name: Exasol stop
        if: ${{ always() && matrix.suite == 'exasol' }}
        run: docker-compose stop exasol
      -
        name: Synapse stop
        if: ${{ always() && matrix.suite == 'synapse' }}
        run: |
          bash ./ci/synapse.sh -p
