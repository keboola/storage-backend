<?php

declare(strict_types=1);

namespace Tests\Keboola\Db\ImportExportFunctional\Snowflake\Exporter;

use DateTimeInterface;
use Flow\Parquet\Reader;
use Keboola\Db\ImportExport\Backend\Snowflake\Export\Exporter;
use Keboola\Db\ImportExport\Backend\Snowflake\Export\S3ParquetExportAdapter;
use Keboola\Db\ImportExport\ExportFileType;
use Keboola\Db\ImportExport\ExportOptions;
use Keboola\Db\ImportExport\Storage;
use Tests\Keboola\Db\ImportExportFunctional\Snowflake\SnowflakeBaseTestCase;

class ParquetExportTest extends SnowflakeBaseTestCase
{
    public const TESTS_PREFIX = 'parquet_export_test_';

    protected function getTestTableName(): string
    {
        return self::TESTS_PREFIX . uniqid();
    }

    public function setUp(): void
    {
        parent::setUp();
        $this->clearDestination($this->getExportDir());
        $this->cleanSchema($this->getDestinationSchemaName());
        $this->cleanSchema($this->getSourceSchemaName());
        $this->createSchema($this->getSourceSchemaName());
        $this->createSchema($this->getDestinationSchemaName());
    }

    private function createTestTable(string $tableName): void
    {
        $this->connection->executeQuery(sprintf(
            'CREATE TABLE %s (
                "ID" INTEGER,
                "STRING_COL" VARCHAR(255),
                "NUMBER_COL" NUMERIC(10,2),
                "DATE_COL" DATE,
                "BOOL_COL" BOOLEAN
            )',
            $this->connection->quoteIdentifier($tableName),
        ));

        // Insert test data
        $this->connection->executeQuery(sprintf(
            'INSERT INTO %s ("ID", "STRING_COL", "NUMBER_COL", "DATE_COL", "BOOL_COL") VALUES
            (1, \'test string\', 123.45, \'2024-01-01\', TRUE),
            (2, \'another string\', 678.90, \'2024-02-01\', FALSE)',
            $this->connection->quoteIdentifier($tableName),
        ));
    }

    public function testExportSimpleToParquet(): void
    {
        $tableName = $this->getTestTableName();
        $this->createTestTable($tableName);

        $source = new Storage\Snowflake\Table(
            $this->getDestinationSchemaName(),
            $tableName,
        );

        $options = new ExportOptions(
            isCompressed: false,
            generateManifest: ExportOptions::MANIFEST_AUTOGENERATED,
            fileType: ExportFileType::PARQUET,
        );
        /** @var Storage\S3\DestinationFile $destination */
        $destination = $this->getDestinationInstance($this->getExportDir() . '/parquet_test');

        $result = (new Exporter($this->connection))->exportTable(
            $source,
            $destination,
            $options,
        );

        $this->assertCount(1, $result);
        /** @var array<mixed> $slice */
        $slice = reset($result);

        $this->assertArrayHasKey('FILE_NAME', $slice);
        $this->assertArrayHasKey('FILE_SIZE', $slice);
        $this->assertArrayHasKey('ROW_COUNT', $slice);

        $this->assertStringEndsWith('.parquet', $slice['FILE_NAME']);
        $this->assertNotEmpty($slice['FILE_SIZE']);
        $this->assertSame(2, (int) $slice['ROW_COUNT']);

        $files = $this->getFileNames($this->getExportDir(), false);
        $this->assertContains($this->getExportDir() . '/parquet_testmanifest', array_values($files));

        $files = $this->listFiles($this->getExportDir());
        $tmpFiles = $this->getParquetFileFromStorage($files);
        $content = $this->getParquetContent($tmpFiles);
        $this->assertSame([
            [
                '_COL_0' => 1.0,
                '_COL_1' => 'test string',
                '_COL_2' => 123.45,
                '_COL_3' => '2024-01-01T00:00:00+00:00',
                '_COL_4' => true,
            ],
            [
                '_COL_0' => 2.0,
                '_COL_1' => 'another string',
                '_COL_2' => 678.9,
                '_COL_3' => '2024-02-01T00:00:00+00:00',
                '_COL_4' => false,
            ],
        ], $content);
    }

    public function testExportCompressedParquet(): void
    {
        $tableName = $this->getTestTableName();
        $this->createTestTable($tableName);

        $source = new Storage\Snowflake\SelectSource(sprintf(
            'SELECT * FROM %s',
            $this->connection->quoteIdentifier($tableName),
        ));

        $options = new ExportOptions(
            isCompressed: true,
            generateManifest: ExportOptions::MANIFEST_AUTOGENERATED,
            fileType: ExportFileType::PARQUET,
        );
        /** @var Storage\S3\DestinationFile $destination */
        $destination = $this->getDestinationInstance($this->getExportDir() . '/parquet_compressed_test');

        $result = (new Exporter($this->connection))->exportTable(
            $source,
            $destination,
            $options,
        );

        $this->assertCount(1, $result);
        /** @var array<mixed> $slice */
        $slice = reset($result);

        $this->assertArrayHasKey('FILE_NAME', $slice);
        $this->assertArrayHasKey('FILE_SIZE', $slice);
        $this->assertArrayHasKey('ROW_COUNT', $slice);

        $this->assertStringEndsWith('.parquet', $slice['FILE_NAME']);
        $this->assertNotEmpty($slice['FILE_SIZE']);
        $this->assertSame(2, (int) $slice['ROW_COUNT']);

        $files = $this->getFileNames($this->getExportDir(), false);
        $this->assertContains($this->getExportDir() . '/parquet_compressed_testmanifest', array_values($files));

        $files = $this->listFiles($this->getExportDir());
        $tmpFiles = $this->getParquetFileFromStorage($files);
        $content = $this->getParquetContent($tmpFiles);
        $this->assertSame([
            [
                '_COL_0' => 1.0,
                '_COL_1' => 'test string',
                '_COL_2' => 123.45,
                '_COL_3' => '2024-01-01T00:00:00+00:00',
                '_COL_4' => true,
            ],
            [
                '_COL_0' => 2.0,
                '_COL_1' => 'another string',
                '_COL_2' => 678.9,
                '_COL_3' => '2024-02-01T00:00:00+00:00',
                '_COL_4' => false,
            ],
        ], $content);
    }

    public function testExportParquetWithQuery(): void
    {
        $tableName = $this->getTestTableName();
        $this->createTestTable($tableName);

        // Use a query that transforms the data
        $source = new Storage\Snowflake\SelectSource(sprintf(
            'SELECT * FROM %s',
            $this->connection->quoteIdentifier($tableName),
        ));

        $options = new ExportOptions(
            isCompressed: false,
            generateManifest: ExportOptions::MANIFEST_AUTOGENERATED,
            fileType: ExportFileType::PARQUET,
        );
        /** @var Storage\S3\DestinationFile $destination */
        $destination = $this->getDestinationInstance($this->getExportDir() . '/parquet_query_test');

        $result = (new Exporter($this->connection))->exportTable(
            $source,
            $destination,
            $options,
        );

        $this->assertCount(1, $result);
        /** @var array<mixed> $slice */
        $slice = reset($result);

        $this->assertArrayHasKey('FILE_NAME', $slice);
        $this->assertArrayHasKey('FILE_SIZE', $slice);
        $this->assertArrayHasKey('ROW_COUNT', $slice);

        $this->assertStringEndsWith('.parquet', $slice['FILE_NAME']);
        $this->assertNotEmpty($slice['FILE_SIZE']);
        $this->assertSame(2, (int) $slice['ROW_COUNT']);

        $files = $this->getFileNames($this->getExportDir(), false);
        $this->assertContains($this->getExportDir() . '/parquet_query_testmanifest', array_values($files));

        $files = $this->listFiles($this->getExportDir());
        $tmpFiles = $this->getParquetFileFromStorage($files);
        $content = $this->getParquetContent($tmpFiles);

        $this->assertSame([
            [
                '_COL_0' => 1.0,
                '_COL_1' => 'test string',
                '_COL_2' => 123.45,
                '_COL_3' => '2024-01-01T00:00:00+00:00',
                '_COL_4' => true,
            ],
            [
                '_COL_0' => 2.0,
                '_COL_1' => 'another string',
                '_COL_2' => 678.9,
                '_COL_3' => '2024-02-01T00:00:00+00:00',
                '_COL_4' => false,
            ],
        ], $content);
    }
}
