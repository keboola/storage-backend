<?php

declare(strict_types=1);

namespace Tests\Keboola\Db\ImportExportFunctional\Bigquery\Exporter;

use Keboola\Csv\CsvFile;
use Keboola\CsvOptions\CsvOptions;
use Keboola\Db\ImportExport\Backend\Bigquery\Export\Exporter;
use Keboola\Db\ImportExport\Backend\Bigquery\ToFinalTable\FullImporter;
use Keboola\Db\ImportExport\Backend\Bigquery\ToStage\StageTableDefinitionFactory;
use Keboola\Db\ImportExport\Backend\Bigquery\ToStage\ToStageImporter;
use Keboola\Db\ImportExport\ExportFileType;
use Keboola\Db\ImportExport\ExportOptions;
use Keboola\Db\ImportExport\ImportOptions;
use Keboola\Db\ImportExport\Storage;
use Keboola\TableBackendUtils\Table\Bigquery\BigqueryTableDefinition;
use Keboola\TableBackendUtils\Table\Bigquery\BigqueryTableQueryBuilder;
use Keboola\TableBackendUtils\Table\Bigquery\BigqueryTableReflection;
use Tests\Keboola\Db\ImportExportFunctional\Bigquery\BigqueryBaseTestCase;

class ParquetExportTest extends BigqueryBaseTestCase
{
    public function setUp(): void
    {
        parent::setUp();
        $this->clearDestination($this->getExportDir());
        $this->cleanDatabase($this->getDestinationDbName());
        $this->createDatabase($this->getDestinationDbName());

        $this->cleanDatabase($this->getSourceDbName());
        $this->createDatabase($this->getSourceDbName());
    }

    public function tearDown(): void
    {
        parent::tearDown();
    }

    public function testExportCompressed(): void
    {
        // files are compressed but the extension is not .gz
        $this->initTable(self::TABLE_OUT_CSV_2COLS);
        // import
        $file = new CsvFile(self::DATA_DIR . 'with-ts.csv');
        $source = $this->getSourceInstance('with-ts.csv', $file->getHeader());
        $destination = new Storage\Bigquery\Table(
            $this->getDestinationDbName(),
            self::TABLE_OUT_CSV_2COLS,
        );

        $this->importTable($source, $destination);

        // export
        $source = $destination;
        $options = new ExportOptions(true, ExportOptions::MANIFEST_AUTOGENERATED, [], ExportFileType::PARQUET);
        $destination = $this->getDestinationInstance($this->getExportDir() . '/gz_test');

        (new Exporter($this->bqClient))->exportTable(
            $source,
            $destination,
            $options,
        );

        $files = $this->getFileNames($this->getExportDir() . '/gz_test', false);
        sort($files);
        $expected = [
            $this->getExportDir() . '/gz_test000000000000.parquet',
            $this->getExportDir() . '/gz_test000000000001.parquet',
            $this->getExportDir() . '/gz_testmanifest',
        ];
        sort($expected);
        $this->assertSame($expected, $files);
    }

    public function testExportSimple(): void
    {
        $this->initTable(self::TABLE_OUT_CSV_2COLS);
        // import
        $file = new CsvFile(self::DATA_DIR . 'with-ts.csv');
        $source = $this->getSourceInstance('with-ts.csv', $file->getHeader());
        $destination = new Storage\Bigquery\Table(
            $this->getDestinationDbName(),
            self::TABLE_OUT_CSV_2COLS,
        );
        $this->importTable($source, $destination);

        // export
        $source = $destination;
        $options = new ExportOptions(false, ExportOptions::MANIFEST_AUTOGENERATED, [], ExportFileType::PARQUET);
        $destination = $this->getDestinationInstance($this->getExportDir() . '/ts_test');

        (new Exporter($this->bqClient))->exportTable(
            $source,
            $destination,
            $options,
        );

        $files = $this->getFileNames($this->getExportDir(), false);
        $this->assertContains($this->getExportDir() . '/ts_testmanifest', array_values($files));

        $files = $this->listFiles($this->getExportDir());
        $actual = $this->getParquetFileFromStorage($files);
        $content = $this->getParquetContent($actual);
        $this->assertArrayEqualsSorted([
            [
                'col1' => 'a',
                'col2' => 'b',
                '_timestamp' => '2014-11-10T13:12:06+00:00',
            ],
            [
                'col1' => 'c',
                'col2' => 'd',
                '_timestamp' => '2014-11-10T14:12:06+00:00',
            ],
        ], $content, 'col1');
    }

    public function testExportSimpleWithQuery(): void
    {
        $this->initTable(self::TABLE_ACCOUNTS_3);
        // import
        $file = new CsvFile(self::DATA_DIR . 'tw_accounts.csv');
        $source = $this->getSourceInstance('tw_accounts.csv', $file->getHeader());
        $destination = new Storage\Bigquery\Table(
            $this->getDestinationDbName(),
            self::TABLE_ACCOUNTS_3,
        );

        $this->importTable($source, $destination);

        // export
        // query needed otherwise timestamp is downloaded
        $query = sprintf(
            'SELECT %s FROM %s',
            implode(',', $file->getHeader()),
            $destination->getQuotedTableWithScheme(),
        );
        $source = new Storage\Bigquery\SelectSource($query);
        $options = new ExportOptions(false, ExportOptions::MANIFEST_AUTOGENERATED, [], ExportFileType::PARQUET);
        $destination = $this->getDestinationInstance($this->getExportDir() . '/tw_test');

        (new Exporter($this->bqClient))->exportTable(
            $source,
            $destination,
            $options,
        );

        $files = $this->getFileNames($this->getExportDir(), false);
        $this->assertContains($this->getExportDir() . '/tw_testmanifest', array_values($files));

        $files = $this->listFiles($this->getExportDir());
        $actual = $this->getParquetFileFromStorage($files);
        $content = $this->getParquetContent($actual);
        $this->assertArrayEqualsSorted([
            [
                'id' => '18',
                'idTwitter' => '512024829',
                'name' => 'Karel says: "I\'ll not let anyone down, including you"',
                'import' => '',
                'isImported' => '1',
                'apiLimitExceededDatetime' => '2012-03-19 16:05:32',
                'analyzeSentiment' => '1',
                'importKloutScore' => '1',
                'timestamp' => '2012-03-19 16:05:32',
                'oauthToken' => 'ddd',
                'oauthSecret' => 'ddd',
                'idApp' => '1',
            ],
            [
                'id' => '60',
                'idTwitter' => '22184682988',
                'name' => 'mr_hashos',
                'import' => '1',
                'isImported' => '1',
                'apiLimitExceededDatetime' => '',
                'analyzeSentiment' => '1',
                'importKloutScore' => '0',
                'timestamp' => '2012-03-28 09:27:24',
                'oauthToken' => 'ddd',
                'oauthSecret' => 'ddd',
                'idApp' => '1',
            ],
            [
                'id' => '15',
                'idTwitter' => '448810375',
                'name' => 'KeboolaDev " with ščř',
                'import' => '0',
                'isImported' => '1',
                'apiLimitExceededDatetime' => '',
                'analyzeSentiment' => '1',
                'importKloutScore' => '0',
                'timestamp' => '2012-02-20 09:34:22',
                'oauthToken' => 'ddd',
                'oauthSecret' => 'ddd',
                'idApp' => '1',
            ],
        ], $content, 'id');
    }

    private function importTable(
        Storage\SourceInterface $source,
        Storage\Bigquery\Table $destination,
    ): void {
        $options = $this->getSimpleImportOptions(ImportOptions::SKIP_FIRST_LINE);
        $importer = new ToStageImporter($this->bqClient);
        $destinationRef = new BigqueryTableReflection(
            $this->bqClient,
            $destination->getSchema(),
            $destination->getTableName(),
        );
        /** @var BigqueryTableDefinition $importDestination */
        $importDestination = $destinationRef->getTableDefinition();
        $stagingTable = StageTableDefinitionFactory::createStagingTableDefinition(
            $importDestination,
            $source->getColumnsNames(),
        );
        $qb = new BigqueryTableQueryBuilder();
        $this->bqClient->runQuery($this->bqClient->query(
            $qb->getCreateTableCommandFromDefinition($stagingTable),
        ));
        $importState = $importer->importToStagingTable(
            $source,
            $stagingTable,
            $options,
        );
        $toFinalTableImporter = new FullImporter($this->bqClient);

        $toFinalTableImporter->importToTable(
            $stagingTable,
            $importDestination,
            $options,
            $importState,
        );
    }
}
