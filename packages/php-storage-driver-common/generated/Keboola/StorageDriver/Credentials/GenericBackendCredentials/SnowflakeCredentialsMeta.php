<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/credentials.proto

namespace Keboola\StorageDriver\Credentials\GenericBackendCredentials;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 **
 * Snowflake credentials metadata
 *
 * Generated from protobuf message <code>keboola.storageDriver.credentials.GenericBackendCredentials.SnowflakeCredentialsMeta</code>
 */
class SnowflakeCredentialsMeta extends \Google\Protobuf\Internal\Message
{
    /**
     * project database name
     *
     * Generated from protobuf field <code>string database = 1;</code>
     */
    protected $database = '';
    /**
     * warehouse name used for connection
     *
     * Generated from protobuf field <code>string warehouse = 2;</code>
     */
    protected $warehouse = '';
    /**
     * query timeout for workspace
     *
     * Generated from protobuf field <code>uint32 workspaceStatementTimeoutSeconds = 3;</code>
     */
    protected $workspaceStatementTimeoutSeconds = 0;
    /**
     * connection tracing level, used for debug
     *
     * Generated from protobuf field <code>uint32 tracingLevel = 4;</code>
     */
    protected $tracingLevel = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $database
     *           project database name
     *     @type string $warehouse
     *           warehouse name used for connection
     *     @type int $workspaceStatementTimeoutSeconds
     *           query timeout for workspace
     *     @type int $tracingLevel
     *           connection tracing level, used for debug
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Credentials::initOnce();
        parent::__construct($data);
    }

    /**
     * project database name
     *
     * Generated from protobuf field <code>string database = 1;</code>
     * @return string
     */
    public function getDatabase()
    {
        return $this->database;
    }

    /**
     * project database name
     *
     * Generated from protobuf field <code>string database = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setDatabase($var)
    {
        GPBUtil::checkString($var, True);
        $this->database = $var;

        return $this;
    }

    /**
     * warehouse name used for connection
     *
     * Generated from protobuf field <code>string warehouse = 2;</code>
     * @return string
     */
    public function getWarehouse()
    {
        return $this->warehouse;
    }

    /**
     * warehouse name used for connection
     *
     * Generated from protobuf field <code>string warehouse = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setWarehouse($var)
    {
        GPBUtil::checkString($var, True);
        $this->warehouse = $var;

        return $this;
    }

    /**
     * query timeout for workspace
     *
     * Generated from protobuf field <code>uint32 workspaceStatementTimeoutSeconds = 3;</code>
     * @return int
     */
    public function getWorkspaceStatementTimeoutSeconds()
    {
        return $this->workspaceStatementTimeoutSeconds;
    }

    /**
     * query timeout for workspace
     *
     * Generated from protobuf field <code>uint32 workspaceStatementTimeoutSeconds = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setWorkspaceStatementTimeoutSeconds($var)
    {
        GPBUtil::checkUint32($var);
        $this->workspaceStatementTimeoutSeconds = $var;

        return $this;
    }

    /**
     * connection tracing level, used for debug
     *
     * Generated from protobuf field <code>uint32 tracingLevel = 4;</code>
     * @return int
     */
    public function getTracingLevel()
    {
        return $this->tracingLevel;
    }

    /**
     * connection tracing level, used for debug
     *
     * Generated from protobuf field <code>uint32 tracingLevel = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setTracingLevel($var)
    {
        GPBUtil::checkUint32($var);
        $this->tracingLevel = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(SnowflakeCredentialsMeta::class, \Keboola\StorageDriver\Credentials\GenericBackendCredentials_SnowflakeCredentialsMeta::class);

