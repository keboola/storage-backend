<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/table.proto

namespace Keboola\StorageDriver\Command\Table\PreviewTableCommand;

use UnexpectedValueException;

/**
 * Protobuf type <code>keboola.storageDriver.command.table.PreviewTableCommand.DataType</code>
 */
class DataType
{
    /**
     * Generated from protobuf enum <code>string = 0;</code>
     */
    const string = 0;
    /**
     * Generated from protobuf enum <code>INTEGER = 1;</code>
     */
    const INTEGER = 1;
    /**
     * Generated from protobuf enum <code>DOUBLE = 2;</code>
     */
    const DOUBLE = 2;
    /**
     * Generated from protobuf enum <code>BIGINT = 3;</code>
     */
    const BIGINT = 3;
    /**
     * Generated from protobuf enum <code>REAL = 4;</code>
     */
    const REAL = 4;
    /**
     * Generated from protobuf enum <code>DECIMAL = 5;</code>
     */
    const DECIMAL = 5;

    private static $valueToName = [
        self::string => 'string',
        self::INTEGER => 'INTEGER',
        self::DOUBLE => 'DOUBLE',
        self::BIGINT => 'BIGINT',
        self::REAL => 'REAL',
        self::DECIMAL => 'DECIMAL',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(DataType::class, \Keboola\StorageDriver\Command\Table\PreviewTableCommand_DataType::class);

