<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/table.proto

namespace Keboola\StorageDriver\Command\Table\ImportExportShared;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>keboola.storageDriver.command.table.ImportExportShared.S3Credentials</code>
 */
class S3Credentials extends \Google\Protobuf\Internal\Message
{
    /**
     * AWS access key
     *
     * Generated from protobuf field <code>string key = 1;</code>
     */
    protected $key = '';
    /**
     * AWS secret key
     *
     * Generated from protobuf field <code>string secret = 2;</code>
     */
    protected $secret = '';
    /**
     *S3 region
     *
     * Generated from protobuf field <code>string region = 5;</code>
     */
    protected $region = '';
    /**
     * set only if temporary credentials (scoped) are used, this is preferred way how to use aws credentials, use "root" credentials only if absolutely necessary
     *
     * Generated from protobuf field <code>string token = 4;</code>
     */
    protected $token = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $key
     *           AWS access key
     *     @type string $secret
     *           AWS secret key
     *     @type string $region
     *          S3 region
     *     @type string $token
     *           set only if temporary credentials (scoped) are used, this is preferred way how to use aws credentials, use "root" credentials only if absolutely necessary
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Table::initOnce();
        parent::__construct($data);
    }

    /**
     * AWS access key
     *
     * Generated from protobuf field <code>string key = 1;</code>
     * @return string
     */
    public function getKey()
    {
        return $this->key;
    }

    /**
     * AWS access key
     *
     * Generated from protobuf field <code>string key = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setKey($var)
    {
        GPBUtil::checkString($var, True);
        $this->key = $var;

        return $this;
    }

    /**
     * AWS secret key
     *
     * Generated from protobuf field <code>string secret = 2;</code>
     * @return string
     */
    public function getSecret()
    {
        return $this->secret;
    }

    /**
     * AWS secret key
     *
     * Generated from protobuf field <code>string secret = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setSecret($var)
    {
        GPBUtil::checkString($var, True);
        $this->secret = $var;

        return $this;
    }

    /**
     *S3 region
     *
     * Generated from protobuf field <code>string region = 5;</code>
     * @return string
     */
    public function getRegion()
    {
        return $this->region;
    }

    /**
     *S3 region
     *
     * Generated from protobuf field <code>string region = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setRegion($var)
    {
        GPBUtil::checkString($var, True);
        $this->region = $var;

        return $this;
    }

    /**
     * set only if temporary credentials (scoped) are used, this is preferred way how to use aws credentials, use "root" credentials only if absolutely necessary
     *
     * Generated from protobuf field <code>string token = 4;</code>
     * @return string
     */
    public function getToken()
    {
        return $this->token;
    }

    /**
     * set only if temporary credentials (scoped) are used, this is preferred way how to use aws credentials, use "root" credentials only if absolutely necessary
     *
     * Generated from protobuf field <code>string token = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setToken($var)
    {
        GPBUtil::checkString($var, True);
        $this->token = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(S3Credentials::class, \Keboola\StorageDriver\Command\Table\ImportExportShared_S3Credentials::class);

