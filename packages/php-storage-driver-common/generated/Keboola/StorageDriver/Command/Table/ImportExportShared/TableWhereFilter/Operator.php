<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/table.proto

namespace Keboola\StorageDriver\Command\Table\ImportExportShared\TableWhereFilter;

use UnexpectedValueException;

/**
 **
 * Supported comparison operators
 *
 * Protobuf type <code>keboola.storageDriver.command.table.ImportExportShared.TableWhereFilter.Operator</code>
 */
class Operator
{
    /**
     * =
     *
     * Generated from protobuf enum <code>eq = 0;</code>
     */
    const eq = 0;
    /**
     * != | <>
     *
     * Generated from protobuf enum <code>ne = 1;</code>
     */
    const ne = 1;
    /**
     * >
     *
     * Generated from protobuf enum <code>gt = 2;</code>
     */
    const gt = 2;
    /**
     * >=
     *
     * Generated from protobuf enum <code>ge = 3;</code>
     */
    const ge = 3;
    /**
     * <
     *
     * Generated from protobuf enum <code>lt = 4;</code>
     */
    const lt = 4;
    /**
     * <=
     *
     * Generated from protobuf enum <code>le = 5;</code>
     */
    const le = 5;

    private static $valueToName = [
        self::eq => 'eq',
        self::ne => 'ne',
        self::gt => 'gt',
        self::ge => 'ge',
        self::lt => 'lt',
        self::le => 'le',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Operator::class, \Keboola\StorageDriver\Command\Table\ImportExportShared_TableWhereFilter_Operator::class);

