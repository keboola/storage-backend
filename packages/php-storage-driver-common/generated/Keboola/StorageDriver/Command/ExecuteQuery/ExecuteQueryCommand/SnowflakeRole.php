<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/executeQuery.proto

namespace Keboola\StorageDriver\Command\ExecuteQuery\ExecuteQueryCommand;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Snowflake specific restriction which will tell driver to call USE ROLE
 *
 * Generated from protobuf message <code>keboola.storageDriver.command.executeQuery.ExecuteQueryCommand.SnowflakeRole</code>
 */
class SnowflakeRole extends \Google\Protobuf\Internal\Message
{
    /**
     * name of the role to be used in Snowflake
     *
     * Generated from protobuf field <code>string roleName = 1;</code>
     */
    protected $roleName = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $roleName
     *           name of the role to be used in Snowflake
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\ExecuteQuery::initOnce();
        parent::__construct($data);
    }

    /**
     * name of the role to be used in Snowflake
     *
     * Generated from protobuf field <code>string roleName = 1;</code>
     * @return string
     */
    public function getRoleName()
    {
        return $this->roleName;
    }

    /**
     * name of the role to be used in Snowflake
     *
     * Generated from protobuf field <code>string roleName = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setRoleName($var)
    {
        GPBUtil::checkString($var, True);
        $this->roleName = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(SnowflakeRole::class, \Keboola\StorageDriver\Command\ExecuteQuery\ExecuteQueryCommand_SnowflakeRole::class);

