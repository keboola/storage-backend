<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/executeQuery.proto

namespace Keboola\StorageDriver\Command\ExecuteQuery;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>keboola.storageDriver.command.executeQuery.ExecuteQueryCommand</code>
 */
class ExecuteQueryCommand extends \Google\Protobuf\Internal\Message
{
    /**
     * will tell driver which path to use for query execution
     * this must scope query execution to specific path, so driver can use correct credentials
     *
     * Generated from protobuf field <code>repeated string pathRestriction = 1;</code>
     */
    private $pathRestriction;
    /**
     * timeout in seconds for the query execution
     *
     * Generated from protobuf field <code>uint32 timeout = 2;</code>
     */
    protected $timeout = 0;
    /**
     * SQL query to be executed
     *
     * Generated from protobuf field <code>string query = 3;</code>
     */
    protected $query = '';
    protected $restriction;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type array<string>|\Google\Protobuf\Internal\RepeatedField $pathRestriction
     *           will tell driver which path to use for query execution
     *           this must scope query execution to specific path, so driver can use correct credentials
     *     @type int $timeout
     *           timeout in seconds for the query execution
     *     @type string $query
     *           SQL query to be executed
     *     @type \Keboola\StorageDriver\Command\ExecuteQuery\ExecuteQueryCommand\SnowflakeRole $snowflakeRole
     *     @type \Keboola\StorageDriver\Command\ExecuteQuery\ExecuteQueryCommand\BigQueryServiceAccount $bigQueryServiceAccount
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\ExecuteQuery::initOnce();
        parent::__construct($data);
    }

    /**
     * will tell driver which path to use for query execution
     * this must scope query execution to specific path, so driver can use correct credentials
     *
     * Generated from protobuf field <code>repeated string pathRestriction = 1;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getPathRestriction()
    {
        return $this->pathRestriction;
    }

    /**
     * will tell driver which path to use for query execution
     * this must scope query execution to specific path, so driver can use correct credentials
     *
     * Generated from protobuf field <code>repeated string pathRestriction = 1;</code>
     * @param array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setPathRestriction($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->pathRestriction = $arr;

        return $this;
    }

    /**
     * timeout in seconds for the query execution
     *
     * Generated from protobuf field <code>uint32 timeout = 2;</code>
     * @return int
     */
    public function getTimeout()
    {
        return $this->timeout;
    }

    /**
     * timeout in seconds for the query execution
     *
     * Generated from protobuf field <code>uint32 timeout = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setTimeout($var)
    {
        GPBUtil::checkUint32($var);
        $this->timeout = $var;

        return $this;
    }

    /**
     * SQL query to be executed
     *
     * Generated from protobuf field <code>string query = 3;</code>
     * @return string
     */
    public function getQuery()
    {
        return $this->query;
    }

    /**
     * SQL query to be executed
     *
     * Generated from protobuf field <code>string query = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setQuery($var)
    {
        GPBUtil::checkString($var, True);
        $this->query = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.keboola.storageDriver.command.executeQuery.ExecuteQueryCommand.SnowflakeRole snowflakeRole = 4;</code>
     * @return \Keboola\StorageDriver\Command\ExecuteQuery\ExecuteQueryCommand\SnowflakeRole|null
     */
    public function getSnowflakeRole()
    {
        return $this->readOneof(4);
    }

    public function hasSnowflakeRole()
    {
        return $this->hasOneof(4);
    }

    /**
     * Generated from protobuf field <code>.keboola.storageDriver.command.executeQuery.ExecuteQueryCommand.SnowflakeRole snowflakeRole = 4;</code>
     * @param \Keboola\StorageDriver\Command\ExecuteQuery\ExecuteQueryCommand\SnowflakeRole $var
     * @return $this
     */
    public function setSnowflakeRole($var)
    {
        GPBUtil::checkMessage($var, \Keboola\StorageDriver\Command\ExecuteQuery\ExecuteQueryCommand\SnowflakeRole::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.keboola.storageDriver.command.executeQuery.ExecuteQueryCommand.BigQueryServiceAccount bigQueryServiceAccount = 5;</code>
     * @return \Keboola\StorageDriver\Command\ExecuteQuery\ExecuteQueryCommand\BigQueryServiceAccount|null
     */
    public function getBigQueryServiceAccount()
    {
        return $this->readOneof(5);
    }

    public function hasBigQueryServiceAccount()
    {
        return $this->hasOneof(5);
    }

    /**
     * Generated from protobuf field <code>.keboola.storageDriver.command.executeQuery.ExecuteQueryCommand.BigQueryServiceAccount bigQueryServiceAccount = 5;</code>
     * @param \Keboola\StorageDriver\Command\ExecuteQuery\ExecuteQueryCommand\BigQueryServiceAccount $var
     * @return $this
     */
    public function setBigQueryServiceAccount($var)
    {
        GPBUtil::checkMessage($var, \Keboola\StorageDriver\Command\ExecuteQuery\ExecuteQueryCommand\BigQueryServiceAccount::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getRestriction()
    {
        return $this->whichOneof("restriction");
    }

}

