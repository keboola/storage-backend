<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/workspace.proto

namespace Keboola\StorageDriver\Command\Workspace;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 **
 * Command will remove single workspace object
 *
 * Generated from protobuf message <code>keboola.storageDriver.command.workspace.DropWorkspaceObjectCommand</code>
 */
class DropWorkspaceObjectCommand extends \Google\Protobuf\Internal\Message
{
    /**
     * database or user name in backend
     *
     * Generated from protobuf field <code>string workspaceObjectName = 1;</code>
     */
    protected $workspaceObjectName = '';
    /**
     * object name in backend which will be removed
     *
     * Generated from protobuf field <code>string objectNameToDrop = 2;</code>
     */
    protected $objectNameToDrop = '';
    /**
     * if true non-existing object should be ignored and command will always pass
     *
     * Generated from protobuf field <code>bool ignoreIfNotExists = 3;</code>
     */
    protected $ignoreIfNotExists = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $workspaceObjectName
     *           database or user name in backend
     *     @type string $objectNameToDrop
     *           object name in backend which will be removed
     *     @type bool $ignoreIfNotExists
     *           if true non-existing object should be ignored and command will always pass
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Workspace::initOnce();
        parent::__construct($data);
    }

    /**
     * database or user name in backend
     *
     * Generated from protobuf field <code>string workspaceObjectName = 1;</code>
     * @return string
     */
    public function getWorkspaceObjectName()
    {
        return $this->workspaceObjectName;
    }

    /**
     * database or user name in backend
     *
     * Generated from protobuf field <code>string workspaceObjectName = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setWorkspaceObjectName($var)
    {
        GPBUtil::checkString($var, True);
        $this->workspaceObjectName = $var;

        return $this;
    }

    /**
     * object name in backend which will be removed
     *
     * Generated from protobuf field <code>string objectNameToDrop = 2;</code>
     * @return string
     */
    public function getObjectNameToDrop()
    {
        return $this->objectNameToDrop;
    }

    /**
     * object name in backend which will be removed
     *
     * Generated from protobuf field <code>string objectNameToDrop = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setObjectNameToDrop($var)
    {
        GPBUtil::checkString($var, True);
        $this->objectNameToDrop = $var;

        return $this;
    }

    /**
     * if true non-existing object should be ignored and command will always pass
     *
     * Generated from protobuf field <code>bool ignoreIfNotExists = 3;</code>
     * @return bool
     */
    public function getIgnoreIfNotExists()
    {
        return $this->ignoreIfNotExists;
    }

    /**
     * if true non-existing object should be ignored and command will always pass
     *
     * Generated from protobuf field <code>bool ignoreIfNotExists = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setIgnoreIfNotExists($var)
    {
        GPBUtil::checkBool($var);
        $this->ignoreIfNotExists = $var;

        return $this;
    }

}

