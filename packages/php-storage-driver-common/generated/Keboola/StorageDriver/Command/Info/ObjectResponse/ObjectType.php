<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/info.proto

namespace Keboola\StorageDriver\Command\Info\ObjectResponse;

use UnexpectedValueException;

/**
 **
 * List of known object types
 * unknown objects will return exception
 *
 * Protobuf type <code>keboola.storageDriver.command.info.ObjectResponse.ObjectType</code>
 */
class ObjectType
{
    /**
     * Generated from protobuf enum <code>DATABASE = 0;</code>
     */
    const DATABASE = 0;
    /**
     * Generated from protobuf enum <code>SCHEMA = 1;</code>
     */
    const SCHEMA = 1;
    /**
     * Generated from protobuf enum <code>TABLE = 2;</code>
     */
    const TABLE = 2;
    /**
     * Generated from protobuf enum <code>VIEW = 3;</code>
     */
    const VIEW = 3;
    /**
     * Generated from protobuf enum <code>FUNCTION = 4;</code>
     */
    const PBFUNCTION = 4;

    private static $valueToName = [
        self::DATABASE => 'DATABASE',
        self::SCHEMA => 'SCHEMA',
        self::TABLE => 'TABLE',
        self::VIEW => 'VIEW',
        self::PBFUNCTION => 'PBFUNCTION',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(ObjectType::class, \Keboola\StorageDriver\Command\Info\ObjectResponse_ObjectType::class);

