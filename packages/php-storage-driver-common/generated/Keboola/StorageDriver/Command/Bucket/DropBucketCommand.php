<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/bucket.proto

namespace Keboola\StorageDriver\Command\Bucket;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 **
 * Command is used when bucket is removed in Keboola connection
 * Command will remove all resources on backed side
 *
 * Generated from protobuf message <code>keboola.storageDriver.command.bucket.DropBucketCommand</code>
 */
class DropBucketCommand extends \Google\Protobuf\Internal\Message
{
    /**
     * object name in backend which will be removed
     *
     * Generated from protobuf field <code>string bucketObjectName = 1;</code>
     */
    protected $bucketObjectName = '';
    /**
     * if true all backend errors should be ignored and command will always pass
     *
     * Generated from protobuf field <code>bool ignoreErrors = 2;</code>
     */
    protected $ignoreErrors = false;
    /**
     * backend read only role associated with project
     *
     * Generated from protobuf field <code>string projectReadOnlyRoleName = 3;</code>
     */
    protected $projectReadOnlyRoleName = '';
    /**
     * metadata specific for each backend
     *
     * Generated from protobuf field <code>.google.protobuf.Any meta = 4;</code>
     */
    protected $meta = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $bucketObjectName
     *           object name in backend which will be removed
     *     @type bool $ignoreErrors
     *           if true all backend errors should be ignored and command will always pass
     *     @type string $projectReadOnlyRoleName
     *           backend read only role associated with project
     *     @type \Google\Protobuf\Any $meta
     *           metadata specific for each backend
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Bucket::initOnce();
        parent::__construct($data);
    }

    /**
     * object name in backend which will be removed
     *
     * Generated from protobuf field <code>string bucketObjectName = 1;</code>
     * @return string
     */
    public function getBucketObjectName()
    {
        return $this->bucketObjectName;
    }

    /**
     * object name in backend which will be removed
     *
     * Generated from protobuf field <code>string bucketObjectName = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setBucketObjectName($var)
    {
        GPBUtil::checkString($var, True);
        $this->bucketObjectName = $var;

        return $this;
    }

    /**
     * if true all backend errors should be ignored and command will always pass
     *
     * Generated from protobuf field <code>bool ignoreErrors = 2;</code>
     * @return bool
     */
    public function getIgnoreErrors()
    {
        return $this->ignoreErrors;
    }

    /**
     * if true all backend errors should be ignored and command will always pass
     *
     * Generated from protobuf field <code>bool ignoreErrors = 2;</code>
     * @param bool $var
     * @return $this
     */
    public function setIgnoreErrors($var)
    {
        GPBUtil::checkBool($var);
        $this->ignoreErrors = $var;

        return $this;
    }

    /**
     * backend read only role associated with project
     *
     * Generated from protobuf field <code>string projectReadOnlyRoleName = 3;</code>
     * @return string
     */
    public function getProjectReadOnlyRoleName()
    {
        return $this->projectReadOnlyRoleName;
    }

    /**
     * backend read only role associated with project
     *
     * Generated from protobuf field <code>string projectReadOnlyRoleName = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setProjectReadOnlyRoleName($var)
    {
        GPBUtil::checkString($var, True);
        $this->projectReadOnlyRoleName = $var;

        return $this;
    }

    /**
     * metadata specific for each backend
     *
     * Generated from protobuf field <code>.google.protobuf.Any meta = 4;</code>
     * @return \Google\Protobuf\Any
     */
    public function getMeta()
    {
        return $this->meta;
    }

    /**
     * metadata specific for each backend
     *
     * Generated from protobuf field <code>.google.protobuf.Any meta = 4;</code>
     * @param \Google\Protobuf\Any $var
     * @return $this
     */
    public function setMeta($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Any::class);
        $this->meta = $var;

        return $this;
    }

}

