<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: proto/common.proto

namespace Keboola\StorageDriver\Command\Common;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Generic response returned by driver
 * Each command handler returns own response
 * This response is wrapper around command response for returning additional data
 *
 * Generated from protobuf message <code>keboola.storageDriver.command.common.DriverResponse</code>
 */
class DriverResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * response returned by executed command
     *
     * Generated from protobuf field <code>.google.protobuf.Any commandResponse = 1;</code>
     */
    protected $commandResponse = null;
    /**
     **
     * List of log messages returned by driver
     * List is not general purpose log, for this purpose internal logger should be used,
     * but log is used for returning messages significant for end user which are stored in job log
     *
     * Generated from protobuf field <code>repeated .keboola.storageDriver.command.common.LogMessage messages = 2;</code>
     */
    private $messages;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Protobuf\Any $commandResponse
     *           response returned by executed command
     *     @type \Keboola\StorageDriver\Command\Common\LogMessage[] $messages
     *          *
     *           List of log messages returned by driver
     *           List is not general purpose log, for this purpose internal logger should be used,
     *           but log is used for returning messages significant for end user which are stored in job log
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Common::initOnce();
        parent::__construct($data);
    }

    /**
     * response returned by executed command
     *
     * Generated from protobuf field <code>.google.protobuf.Any commandResponse = 1;</code>
     * @return \Google\Protobuf\Any|null
     */
    public function getCommandResponse()
    {
        return $this->commandResponse;
    }

    public function hasCommandResponse()
    {
        return isset($this->commandResponse);
    }

    public function clearCommandResponse()
    {
        unset($this->commandResponse);
    }

    /**
     * response returned by executed command
     *
     * Generated from protobuf field <code>.google.protobuf.Any commandResponse = 1;</code>
     * @param \Google\Protobuf\Any $var
     * @return $this
     */
    public function setCommandResponse($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Any::class);
        $this->commandResponse = $var;

        return $this;
    }

    /**
     **
     * List of log messages returned by driver
     * List is not general purpose log, for this purpose internal logger should be used,
     * but log is used for returning messages significant for end user which are stored in job log
     *
     * Generated from protobuf field <code>repeated .keboola.storageDriver.command.common.LogMessage messages = 2;</code>
     * @return RepeatedField<\Keboola\StorageDriver\Command\Common\LogMessage>
     */
    public function getMessages()
    {
        return $this->messages;
    }

    /**
     **
     * List of log messages returned by driver
     * List is not general purpose log, for this purpose internal logger should be used,
     * but log is used for returning messages significant for end user which are stored in job log
     *
     * Generated from protobuf field <code>repeated .keboola.storageDriver.command.common.LogMessage messages = 2;</code>
     * @param \Keboola\StorageDriver\Command\Common\LogMessage[] $var
     * @return $this
     */
    public function setMessages($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Keboola\StorageDriver\Command\Common\LogMessage::class);
        $this->messages = $arr;

        return $this;
    }

}

