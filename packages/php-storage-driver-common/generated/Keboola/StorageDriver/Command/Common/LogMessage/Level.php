<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: proto/common.proto

namespace Keboola\StorageDriver\Command\Common\LogMessage;

use UnexpectedValueException;

/**
 * log levels according to RFC 5424
 *
 * Protobuf type <code>keboola.storageDriver.command.common.LogMessage.Level</code>
 */
class Level
{
    /**
     * Generated from protobuf enum <code>Emergency = 0;</code>
     */
    const Emergency = 0;
    /**
     * Generated from protobuf enum <code>Alert = 1;</code>
     */
    const Alert = 1;
    /**
     * Generated from protobuf enum <code>Critical = 2;</code>
     */
    const Critical = 2;
    /**
     * Generated from protobuf enum <code>Error = 3;</code>
     */
    const Error = 3;
    /**
     * Generated from protobuf enum <code>Warning = 4;</code>
     */
    const Warning = 4;
    /**
     * Generated from protobuf enum <code>Notice = 5;</code>
     */
    const Notice = 5;
    /**
     * Generated from protobuf enum <code>Informational = 6;</code>
     */
    const Informational = 6;
    /**
     * Generated from protobuf enum <code>Debug = 7;</code>
     */
    const Debug = 7;

    private static $valueToName = [
        self::Emergency => 'Emergency',
        self::Alert => 'Alert',
        self::Critical => 'Critical',
        self::Error => 'Error',
        self::Warning => 'Warning',
        self::Notice => 'Notice',
        self::Informational => 'Informational',
        self::Debug => 'Debug',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

